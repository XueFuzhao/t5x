# Register necessary SeqIO Tasks/Mixtures.
from __gin__ import dynamic_registration
import t5.data.mixtures
import __main__ as train_script
import seqio
import flaxformer
from t5x import utils
from t5x import trainer
from t5x.contrib.moe import trainer as moe_trainer
from t5x.contrib.moe import models


include 'flaxformer/flaxformer/t5x/configs/moe/models/st_moe_decoder_only_base.gin'
include 't5x/contrib/moe/configs/runs/finetune.gin'


BATCH_SIZE = 128
MIXTURE_OR_TASK_NAME = "squad_v010_allanswers"
TASK_FEATURE_LENGTHS = {'inputs': 512, 'targets': 128}
DROPOUT_RATE = 0.1
TRAIN_STEPS = 544288  # 524288 pre-trained steps + 20000 fine-tuning steps.
USE_CACHED_TASKS = False
NUM_MODEL_PARTITIONS = 1
NUM_EXPERTS = 8

INITIAL_CHECKPOINT_PATH = "gs://fuzhao/t5x/flax-moe-decoder-only-base-expert8/t5-500KSteps/checkpoint_524288"


# `LOSS_NORMALIZING_FACTOR`: When fine-tuning a model that was pre-trained
# using Mesh Tensorflow (e.g. the public T5 / mT5 / ByT5 models), this should be
# set to `pretraining batch_size` * `target_token_length`. For T5 and T5.1.1:
# `2048 * 114`. For mT5: `1024 * 229`. For ByT5: `1024 * 189`.
# LOSS_NORMALIZING_FACTOR = 14592

train_script.train:
  eval_period = 1000

train_script.train:
  train_dataset_cfg = @train/utils.DatasetConfig()
  train_eval_dataset_cfg = @train_eval/utils.DatasetConfig()
  infer_eval_dataset_cfg = @infer_eval/utils.DatasetConfig()

# models.MoeEncoderDecoderModel.predict_batch_with_aux.num_decodes = 4
models.MoeDecoderOnlyModel.inputs_bidirectional_attention=True

infer_eval/utils.DatasetConfig:
  mixture_or_task_name = %MIXTURE_OR_TASK_NAME
  task_feature_lengths = %TASK_FEATURE_LENGTHS
  split = 'validation'
  batch_size = 128
  shuffle = False
  seed = 42
  use_cached = %USE_CACHED_TASKS
  pack = False
  module = %MIXTURE_OR_TASK_MODULE

seqio.Evaluator:
  logger_cls = [@seqio.PyLoggingLogger, @seqio.TensorBoardLogger, @seqio.JSONLogger]
  num_examples = None  # Use all examples in the dataset.
  use_memory_cache = True
